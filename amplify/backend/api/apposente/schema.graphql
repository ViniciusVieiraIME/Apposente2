input CreateIRPFTInput {
  IRPFID: Int!
  userid: Int!
  month: String
  market: String
  monthProfit: Float
  monthSale: Float
  closedLoanProfit: Float
  tributableProfit: Float
  nonTributableProfit: Float
  dayTradeProfit: Float
}

type IRPFT {
  IRPFID: Int!
  userid: Int!
  month: String
  market: String
  monthProfit: Float
  monthSale: Float
  closedLoanProfit: Float
  tributableProfit: Float
  nonTributableProfit: Float
  dayTradeProfit: Float
}

input UpdateIRPFTInput {
  IRPFID: Int!
  userid: Int
  month: String
  market: String
  monthProfit: Float
  monthSale: Float
  closedLoanProfit: Float
  tributableProfit: Float
  nonTributableProfit: Float
  dayTradeProfit: Float
}

input CreateAvgPriceTInput {
  avgPriceID: Int!
  userid: Int!
  market: String
  stockcode: String
  tradedate: AWSDateTime
  quantity: Int
  price: Float
  totalvalue: Float
  daytrade: Int
  avgprice: Float
  profitloss: Float
  quantitydaytrade: Int
  profitlossdaytrade: Float
  costvalue: Float
  prevstock: Int
  stock: Int
}

type avgPriceT {
  avgPriceID: Int!
  userid: Int!
  market: String
  stockcode: String
  tradedate: AWSDateTime
  quantity: Int
  price: Float
  totalvalue: Float
  daytrade: Int
  avgprice: Float
  profitloss: Float
  quantitydaytrade: Int
  profitlossdaytrade: Float
  costvalue: Float
  prevstock: Int
  stock: Int
}

input UpdateAvgPriceTInput {
  avgPriceID: Int!
  userid: Int
  market: String
  stockcode: String
  tradedate: AWSDateTime
  quantity: Int
  price: Float
  totalvalue: Float
  daytrade: Int
  avgprice: Float
  profitloss: Float
  quantitydaytrade: Int
  profitlossdaytrade: Float
  costvalue: Float
  prevstock: Int
  stock: Int
}

input CreateCostsInput {
  costID: Int!
  userid: Int!
  transactionid: Int
  stockcode: String
  title: String!
  description: String
  value: Float
  costdate: AWSDate
  creationdate: AWSDateTime
  editeddate: AWSDateTime
}

type costs {
  costID: Int!
  userid: Int!
  transactionid: Int
  stockcode: String
  title: String!
  description: String
  value: Float
  costdate: AWSDate
  creationdate: AWSDateTime
  editeddate: AWSDateTime
}

input UpdateCostsInput {
  costID: Int!
  userid: Int
  transactionid: Int
  stockcode: String
  title: String
  description: String
  value: Float
  costdate: AWSDate
  creationdate: AWSDateTime
  editeddate: AWSDateTime
}

input CreateCurrentpositionInput {
  currentpositionid: Int!
  userid: Int!
  brokername: String
  brokeraccount: Int
  description: String
  type: String
  stockcode: String
  currentprice: Float
  quantity: Int
  quotefactor: Int
  currentvalue: Float
  creationtime: AWSDateTime
  editedtime: AWSDateTime
  rate: Float
}

type currentposition {
  currentpositionid: Int!
  userid: Int!
  brokername: String
  brokeraccount: Int
  description: String
  type: String
  stockcode: String
  currentprice: Float
  quantity: Int
  quotefactor: Int
  currentvalue: Float
  creationtime: AWSDateTime
  editedtime: AWSDateTime
  rate: Float
}

input UpdateCurrentpositionInput {
  currentpositionid: Int!
  userid: Int
  brokername: String
  brokeraccount: Int
  description: String
  type: String
  stockcode: String
  currentprice: Float
  quantity: Int
  quotefactor: Int
  currentvalue: Float
  creationtime: AWSDateTime
  editedtime: AWSDateTime
  rate: Float
}

input CreatePortfolioPerformanceTInput {
  porfolioPerformanceID: Int!
  date: AWSDate!
  userid: Int!
  stockCode: String!
  position: Int
  purvalue: Float
  closingPrice: Float
  curValue: Float
  prevPosition: Int
  positionChange: Int
  cashflow: Float
  prevClosingPrice: Float
  profitability: Float
  result: Float
}

type portfolioPerformanceT {
  porfolioPerformanceID: Int!
  date: AWSDate!
  userid: Int!
  stockCode: String!
  position: Int
  purvalue: Float
  closingPrice: Float
  curValue: Float
  prevPosition: Int
  positionChange: Int
  cashflow: Float
  prevClosingPrice: Float
  profitability: Float
  result: Float
}

input UpdatePortfolioPerformanceTInput {
  porfolioPerformanceID: Int!
  date: AWSDate
  userid: Int
  stockCode: String
  position: Int
  purvalue: Float
  closingPrice: Float
  curValue: Float
  prevPosition: Int
  positionChange: Int
  cashflow: Float
  prevClosingPrice: Float
  profitability: Float
  result: Float
}

input CreateStockQuotesInput {
  stockquoteid: Int!
  date: AWSDate
  market: String
  stockcode: String
  stockname: String
  stocktype: String
  opening: Float
  max: Float
  min: Float
  avg: Float
  last: Float
  bpurch: Float
  bsale: Float
  negotiations: Int
  quantity: Int
  volume: Int
}

type stockQuotes {
  stockquoteid: Int!
  date: AWSDate
  market: String
  stockcode: String
  stockname: String
  stocktype: String
  opening: Float
  max: Float
  min: Float
  avg: Float
  last: Float
  bpurch: Float
  bsale: Float
  negotiations: Int
  quantity: Int
  volume: Int
}

input UpdateStockQuotesInput {
  stockquoteid: Int!
  date: AWSDate
  market: String
  stockcode: String
  stockname: String
  stocktype: String
  opening: Float
  max: Float
  min: Float
  avg: Float
  last: Float
  bpurch: Float
  bsale: Float
  negotiations: Int
  quantity: Int
  volume: Int
}

input CreateTransactionAutoupdateLogInput {
  trasactionAutoupdateLogID: Int!
  transactionid: Int!
  description: String
}

type transactionAutoupdateLog {
  trasactionAutoupdateLogID: Int!
  transactionid: Int!
  description: String
}

input UpdateTransactionAutoupdateLogInput {
  trasactionAutoupdateLogID: Int!
  transactionid: Int
  description: String
}

input CreateTransactionUpdatesInput {
  transactionupdateid: Int!
  transactionid: Int!
  field: String!
  oldvalue: String!
  newvalue: String!
  modifieddate: AWSDateTime!
}

type transactionUpdates {
  transactionupdateid: Int!
  transactionid: Int!
  field: String!
  oldvalue: String!
  newvalue: String!
  modifieddate: AWSDateTime!
}

input UpdateTransactionUpdatesInput {
  transactionupdateid: Int!
  transactionid: Int
  field: String
  oldvalue: String
  newvalue: String
  modifieddate: AWSDateTime
}

input CreateTransactionsInput {
  transactionid: Int!
  userid: Int!
  username: String
  brokername: String
  brokercode: Int
  brokeraccount: Int
  tradedate: AWSDateTime!
  market: String
  stockcode: String!
  description: String
  quantity: Int!
  price: Float!
  totalvalue: Float!
  reportdate: AWSDate
  creationtime: AWSDateTime!
  editedtime: AWSDateTime
}

type transactions {
  transactionid: Int!
  userid: Int!
  username: String
  brokername: String
  brokercode: Int
  brokeraccount: Int
  tradedate: AWSDateTime!
  market: String
  stockcode: String!
  description: String
  quantity: Int!
  price: Float!
  totalvalue: Float!
  reportdate: AWSDate
  creationtime: AWSDateTime!
  editedtime: AWSDateTime
}

input UpdateTransactionsInput {
  transactionid: Int!
  userid: Int
  username: String
  brokername: String
  brokercode: Int
  brokeraccount: Int
  tradedate: AWSDateTime
  market: String
  stockcode: String
  description: String
  quantity: Int
  price: Float
  totalvalue: Float
  reportdate: AWSDate
  creationtime: AWSDateTime
  editedtime: AWSDateTime
}

input CreateUsersInput {
  cpf: Int!
  email: String
  password: String!
}

type users {
  userid: Int!
  cpf: Int!
  email: String
  password: String!
  creationtime: AWSDateTime
  name: String
  lastcrawltime: AWSDateTime
}

input UpdateUsersInput {
  userid: Int!
  cpf: Int
  email: String
  password: String
  creationtime: AWSDateTime
  name: String
  lastcrawltime: AWSDateTime
}

type Mutation {
  deleteIRPFT(IRPFID: Int!): IRPFT
  createIRPFT(createIRPFTInput: CreateIRPFTInput!): IRPFT
  updateIRPFT(updateIRPFTInput: UpdateIRPFTInput!): IRPFT
  deleteAvgPriceT(avgPriceID: Int!): avgPriceT
  createAvgPriceT(createAvgPriceTInput: CreateAvgPriceTInput!): avgPriceT
  updateAvgPriceT(updateAvgPriceTInput: UpdateAvgPriceTInput!): avgPriceT
  deleteCosts(costID: Int!): costs
  createCosts(createCostsInput: CreateCostsInput!): costs
  updateCosts(updateCostsInput: UpdateCostsInput!): costs
  deleteCurrentposition(currentpositionid: Int!): currentposition
  createCurrentposition(createCurrentpositionInput: CreateCurrentpositionInput!): currentposition
  updateCurrentposition(updateCurrentpositionInput: UpdateCurrentpositionInput!): currentposition
  deletePortfolioPerformanceT(porfolioPerformanceID: Int!): portfolioPerformanceT
  createPortfolioPerformanceT(createPortfolioPerformanceTInput: CreatePortfolioPerformanceTInput!): portfolioPerformanceT
  updatePortfolioPerformanceT(updatePortfolioPerformanceTInput: UpdatePortfolioPerformanceTInput!): portfolioPerformanceT
  deleteStockQuotes(stockquoteid: Int!): stockQuotes
  createStockQuotes(createStockQuotesInput: CreateStockQuotesInput!): stockQuotes
  updateStockQuotes(updateStockQuotesInput: UpdateStockQuotesInput!): stockQuotes
  deleteTransactionAutoupdateLog(trasactionAutoupdateLogID: Int!): transactionAutoupdateLog
  createTransactionAutoupdateLog(createTransactionAutoupdateLogInput: CreateTransactionAutoupdateLogInput!): transactionAutoupdateLog
  updateTransactionAutoupdateLog(updateTransactionAutoupdateLogInput: UpdateTransactionAutoupdateLogInput!): transactionAutoupdateLog
  deleteTransactionUpdates(transactionupdateid: Int!): transactionUpdates
  createTransactionUpdates(createTransactionUpdatesInput: CreateTransactionUpdatesInput!): transactionUpdates
  updateTransactionUpdates(updateTransactionUpdatesInput: UpdateTransactionUpdatesInput!): transactionUpdates
  deleteTransactions(transactionid: Int!): transactions
  createTransactions(createTransactionsInput: CreateTransactionsInput!): transactions
  updateTransactions(updateTransactionsInput: UpdateTransactionsInput!): transactions
  deleteUsers(userid: Int!): users
  createUsers(createUsersInput: CreateUsersInput!): users
  updateUsers(updateUsersInput: UpdateUsersInput!): users
}

type Query {
  getIRPFT(IRPFID: Int!): IRPFT
  listIRPFTs: [IRPFT]
  getAvgPriceT(avgPriceID: Int!): avgPriceT
  listAvgPriceTs: [avgPriceT]
  getCosts(costID: Int!): costs
  listCostss: [costs]
  getCurrentposition(currentpositionid: Int!): currentposition
  listCurrentpositions: [currentposition]
  getPortfolioPerformanceT(porfolioPerformanceID: Int!): portfolioPerformanceT
  listPortfolioPerformanceTs: [portfolioPerformanceT]
  getStockQuotes(stockquoteid: Int!): stockQuotes
  listStockQuotess: [stockQuotes]
  getTransactionAutoupdateLog(trasactionAutoupdateLogID: Int!): transactionAutoupdateLog
  listTransactionAutoupdateLogs: [transactionAutoupdateLog]
  getTransactionUpdates(transactionupdateid: Int!): transactionUpdates
  listTransactionUpdatess: [transactionUpdates]
  getTransactions(transactionid: Int!): transactions
  listTransactionss: [transactions]
  getUsers(userid: Int!): users
  getUsersByEmail(email: String!): users
  listUserss: [users]
}

type Subscription {
  onCreateIRPFT: IRPFT @aws_subscribe(mutations: ["createIRPFT"])
  onCreateAvgPriceT: avgPriceT @aws_subscribe(mutations: ["createAvgPriceT"])
  onCreateCosts: costs @aws_subscribe(mutations: ["createCosts"])
  onCreateCurrentposition: currentposition @aws_subscribe(mutations: ["createCurrentposition"])
  onCreatePortfolioPerformanceT: portfolioPerformanceT @aws_subscribe(mutations: ["createPortfolioPerformanceT"])
  onCreateStockQuotes: stockQuotes @aws_subscribe(mutations: ["createStockQuotes"])
  onCreateTransactionAutoupdateLog: transactionAutoupdateLog @aws_subscribe(mutations: ["createTransactionAutoupdateLog"])
  onCreateTransactionUpdates: transactionUpdates @aws_subscribe(mutations: ["createTransactionUpdates"])
  onCreateTransactions: transactions @aws_subscribe(mutations: ["createTransactions"])
  onCreateUsers: users @aws_subscribe(mutations: ["createUsers"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
